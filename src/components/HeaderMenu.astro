---
import { translation } from '../i18n/translations'
type Props = {
  currentLang: 'en' | 'ru'
}
const { currentLang } = Astro.props
const resumeLink = `/${currentLang}/resume`
const portfolioLink = `/${currentLang}#cases__front-page`

function changeSiteLanguageTo(to: string) {
  let newLocation = Astro.url.pathname
  let currentPath = Astro.url.pathname
  if (Astro.url.pathname == '/') {
    currentPath += to
  }
  if (currentLang == to) {
    return newLocation
  }
  if (currentLang !== to) {
    newLocation = currentPath.replace(currentLang, to)
  }
  return newLocation
}
---

<div class='flex flex-row gap-2'>
  <div class='flex flex-row items-center sm:gap-4 gap-2'>
    <a class='text-sm md:text-base' href={portfolioLink}>{translation[currentLang].projects}</a>
    <a class='text-sm md:text-base' href={resumeLink}>{translation[currentLang].resume}</a>
    <div class='relative'>
      <button
        type='button'
        aria-label='Change Language'
        class='current-lang text-sm md:text-base border border-gray-400 rounded py-1 px-2 w-max flex flex-row items-center gap-1'
        >{currentLang.toUpperCase()}</button
      >
      <nav
        class='change-lang hidden flex flex-col gap-2 absolute -bottom-16 sm:-bottom-20 -right-0 left-0 border border-blue-500 rounded py-1 px-2 bg-white shadow z-20'>
        <a href={changeSiteLanguageTo('ru')} class='block w-full'>RU</a>
        <a href={changeSiteLanguageTo('en')} class='block w-full'>EN</a>
      </nav>
    </div>
  </div>
</div>
<script>
  const languageSelect = document.querySelector<HTMLElement>('.current-lang')!
  const selectorPopup = document.querySelector<HTMLElement>('.change-lang')!

  let isSelectorPopupOpened = false
  languageSelect?.addEventListener('click', e => {
    toggleLanguageSelect()
  })

  function toggleLanguageSelect() {
    languageSelect.classList.toggle('border-gray-400')
    languageSelect.classList.toggle('bg-blue-100')
    languageSelect.classList.toggle('border-blue-500')
    selectorPopup?.classList.toggle('hidden')
    isSelectorPopupOpened = !isSelectorPopupOpened
  }

  hideOnClickOutside(selectorPopup)

  function hideOnClickOutside(element: HTMLElement) {
    //
    const outsideClickListener = (event: Event) => {
      const isSelectorButtonClicked = event.target == languageSelect

      if (!element.contains(event.target as Node) && isSelectorPopupOpened && !isSelectorButtonClicked) {
        toggleLanguageSelect()
        removeClickListener()
      }
    }

    const removeClickListener = () => {
      document.body.removeEventListener('click', outsideClickListener)
    }
    document.body.addEventListener('click', outsideClickListener)
  }
</script>
