---
import { translations } from '../i18n/translations'
import { links } from '../content/links'

const { isBig } = Astro.props

const lang = (Astro.currentLocale as 'ru' | 'en') || 'en'
---

<button
  type='button'
  class:list={isBig ? 'big-cta-button' : 'small-cta-button'}
  class='relative flex flex-col gap-4 lg:gap-8 items-center justify-center w-full max-h-40 disabled:max-h-80 lg:max-h-64 lg:h-64 p-8 lg:px-8 lg:py-12 rounded-[80px] disabled:rounded-[48px] lg:disabled:rounded-full lg:rounded-full bg-accent overflow-clip transition-all duration-700 ease-out group'>
  <span
    class='button-text text-5xl leading-none md:text-7xl lg:text-9xl lg:w-full xl:text-[10rem] text-smoke-white transition-all duration-700 ease-out'
    >{translations[lang].get_in_touch}</span
  >
  <div
    class='links hidden flex max-sm:flex-col gap-2 lg:gap-4 opacity-0 translate-y-12 transition-all duration-700 delay-200'>
    {
      links.map(link => (
        <a
          class='px-4 py-2 lg:px-8 lg:py-4 border-2 border-smoke-white flex justify-center text-xl lg:text-2xl text-accent hover:text-smoke-white rounded-full bg-smoke-white hover:bg-transparent transition-all transition-200 ease-in'
          href={link.href}
          target='_blank'>
          {link.name}
        </a>
      ))
    }
  </div>
</button>

<script>
  const button = document.querySelector<HTMLButtonElement>('.big-cta-button')!
  const links = button.querySelector<HTMLDivElement>('.links')
  const text = button.querySelector<HTMLDivElement>('.button-text')

  const controller = new AbortController()

  function scaleOnHover() {
    button.style.scale = '0.95'
    button.style.transitionDuration = '8s'
    text!.style.scale = '1.15'
    text!.style.transitionDuration = '16s'
  }

  function revertButtonSize() {
    button.style.scale = '1'
    button.style.transitionDuration = '1s'
    text!.style.scale = '1'
    text!.style.transitionDuration = '1s'
  }

  function removeInlineStyles() {
    button.style.removeProperty('scale')
    button.style.removeProperty('transition-duration')
    text!.style.removeProperty('transition-duration')
    text!.style.removeProperty('scale')
  }

  button.addEventListener('mouseover', scaleOnHover)
  button.addEventListener('mouseleave', revertButtonSize)

  button?.addEventListener('click', () => {
    removeInlineStyles()
    button.removeEventListener('mouseover', scaleOnHover)
    button.removeEventListener('mouseleave', revertButtonSize)
    button.setAttribute('disabled', 'true')
    button.classList.remove('group')
    links?.classList.remove('hidden')
    text?.classList.add('animate-text')

    setTimeout(() => {
      button.scrollIntoView({
        block: 'start',
        behavior: 'smooth',
      })
    }, 300)

    setTimeout(() => {
      links?.classList.add('animate-links')
    }, 400)
  })
</script>

<style>
  .animate-links {
    @apply opacity-100 translate-y-0 lg:translate-y-1/3;
  }

  .animate-text {
    @apply text-3xl lg:text-5xl lg:absolute lg:-translate-y-[64px];
  }
</style>
